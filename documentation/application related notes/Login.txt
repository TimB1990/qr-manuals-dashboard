# requirements for login:

- token is passed on successfull login or registration
- when siteroot is being accessed, component Entry is loaded. This component has login register functionality


INFORMATION

# Token scopes

- Scopes allow your API clients to request a specific set of permissions when requesting authorization to access an account

# Defining scope

in AuthServiceProvider.php

Passport::tokensCan([
   'place-orders' => 'Place orders',
   'check-status' => 'Check order status'
]);

# default scope

Passport::setDefaultScope([
   'check-status', 'place-orders'
])

# assigning scopes to tokens

- When requesting an access token using the authorization code grant, consumers should specify their desired scopes as the scope query string parameter. The scope parameter should be a space-delimited list of scopes:

Route::get('/redirect', function(){
   $query = http_build_query([
      'client_id' => 'client-id',
      'redirect_url' => 'http://example.com/callback',
      'response_type' => 'code',
      'scope' => 'place-orders check-status'
   ]);

   return redirect('http://your-app.com/oauth/authorize?'.$query);
});

# personal access tokens
$token = $user->createToken('My Token', ['place-orders'])->accessToken;

# checking scope 

in kernel.php:
'scopes' => \Laravel\Passport\Http\Middleware\CheckScopes::class,
'scope' => \Laravel\Passport\Http\Middleware\CheckForAnyScope::class,

api.php
Route::get('/orders', function () {
    // Access token has either "check-status" or "place-orders" scope...
})->middleware(['auth:api', 'scope:check-status,place-orders']);

# CSRF protection
When using this method of authentication, you will need to ensure a valid CSRF token header is included in your requests. The default Laravel JavaScript scaffolding includes an Axios instance, which will automatically use the encrypted XSRF-TOKEN cookie value to send a X-XSRF-TOKEN header on same-origin requests.