<?php

$factory->define(App\Video::clas, function (Faker $faker){
	return [
		'title' => $faker->sentence
		'archived' => $faker->boolean()
	]
}

public function testDatabase(){
	
	// make call to application
	$this->assertDatabaseHas('users'.['email' => 'sally@example.com'])
}

php artisan make:factory PostFactory --model = Post

class ExampleTest extends TestCade{
	use RefreshDatabase;
	
	/* basic functional test example*/
	public function testBasicExample(){
		$response = $this->get('/');
	}
}

// factory
use Faker\Generator as Faker;
use Illuminate\Support\Str;

$factory->define(App\User::class, function (Faker $faker){
	return [
		'name' => $faker->name,
		'email' => $faker->unique()->safeEmail,
		'email_verified_at' => now(),
		'password' => '$8293589^&'^,
		'remember_token' => Str::random(10)
	]
});

/*
If you have extended a model, you may wish to extend its factory as well in order to utilize the child model's factory attributes during testing and seeding. o accomplish this, you may call the factory builder's raw method to obtain the raw array of attributes from any given factory:
*/

$factory-define(App\Admin::class, function (Faker\Generator $faker){
	return factory(App\User::class)->raw([/**/]);
}

//creating models
public function testDatabase(){
	$user = factory(App\User::class)->make();
	// use model in tests
}

// create three App\User instances
$users = factory(App\User::class, 3)->make();

// to override some of default values
$user = factory(App\User::class)->make(['name' => 'Abigail']);

// relationships
$users = factory(App\User::class,3)->create()->each(function ($user){
	$user->posts()->save(factory(App\Post::class)->make());
});

// create multiple related related models
$user->posts()->createMany(factory(App\Post::class,3)->make()->toArray());

// attach relationships to models
$factory->define(App\Post::class, function($faker){
	return ['title' => $faker->title, 'content' => $faker->paragraph, 'user_id' => factory(App\User::class)];
});

// provide callback which accepts the evaluated attribute array
$factory->define(App\Post::class, function($faker){
	return ['title' => $faker->title, 'content' => $faker->paragraph, 'user_id' => factory(App\User::class),
	'user_type' => function (array $post){
		return App\User::find($post['user_id']->type;)
	}];
});

public function testDatabase()
{
    // Create a single App\User instance...
    $user = factory(App\User::class)->create();

    // Create three App\User instances...
    $users = factory(App\User::class, 3)->create();

    // Use model in tests...
}

// SEEDER
php artisan make:seeder UsersTableSeeder

/*A seeder class only contains one method by default: run. This method is called when the db:seed Artisan command is executed. Within the run method, you may insert data into your database however you wish. You may use the query builder to manually insert data or you may use Eloquent model factories.*/

<?php

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class DatabaseSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::table('users')->insert([
            'name' => Str::random(10),
            'email' => Str::random(10).'@gmail.com',
            'password' => Hash::make('password'),
        ]);
    }
}

// using model factories with seeder
public function run(){
	factory(App\User::class,50)->create()->each(function($user){
		$user->posts()->save(factory(App\Post::class)->make());
	});
}

// PIVOT table
DB::table('user_skill')->insert(
    [
        'user_id' => User::select('id')->orderByRaw("RAND()")->first()->id,
        'skill_id' => Skill::select('id')->orderByRaw("RAND()")->first()->id,
    ]
);


DB::table('category_product')->insert(['category_id' => Category::select('id')->orderByRaw("random()")->first()->id, 'product_id' => Product::select('id')->orderByRaw("random()")->first()->id]);

$factory->define(App\UserSkill::class, function (Faker\Generator $faker) {
    return [
        'user_id' => factory(App\User::class)->create()->id,
        'skill_id' => factory(App\Skill::class)->create()->id,
    ];
});

// If you do not want to create a model just for the pivot table, you can insert it manually.

DB::table('user_skill')->insert(
    [
        'user_id' => factory(App\User::class)->create()->id,
        'skill_id' => factory(App\Skill::class)->create()->id,
    ]
);

// Or, with random existing values.

DB::table('user_skill')->insert(
    [
        'user_id' => User::select('id')->orderByRaw("RAND()")->first()->id,
        'skill_id' => Skill::select('id')->orderByRaw("RAND()")->first()->id,
    ]
);

// TESTS TO IMPLEMENT

// for project | note: SQLITE | for pivot table
DB::table('category_product')->insert(
    [
        'category_id' => Category::select('id')->orderByRaw("random()")->first()->id,
        'product_id' => Product::select('id')->orderByRaw("random()")->first()->id,
    ]
);

// create
factory(App\Product::class,7)->create();





